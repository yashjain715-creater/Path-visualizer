{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\nexport function dfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const nextNodesStack = [];\n  nextNodesStack.push(startNode);\n\n  while (nextNodesStack.length) {\n    const currentNode = nextNodesStack.pop();\n\n    if (currentNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n\n    if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\n      currentNode.isVisited = true;\n      visitedNodesInOrder.push(currentNode);\n      const col = currentNode.col,\n            row = currentNode.row;\n      let nextNode;\n\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          nextNodesStack.push(nextNode);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:\\Users\\yashj\\OneDrive\\Desktop\\pathFinderVisualizer\\src\\algorithms\\dfs.js"],"names":["dfs","grid","startNode","finishNode","visitedNodesInOrder","nextNodesStack","push","length","currentNode","pop","isWall","isStart","isVisited","col","row","nextNode","previousNode"],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0C;AAC/C,QAAMC,mBAAmB,GAAG,EAA5B;AACA,QAAMC,cAAc,GAAG,EAAvB;AACAA,EAAAA,cAAc,CAACC,IAAf,CAAoBJ,SAApB;;AACA,SAAOG,cAAc,CAACE,MAAtB,EAA8B;AAC5B,UAAMC,WAAW,GAAGH,cAAc,CAACI,GAAf,EAApB;;AAEA,QAAID,WAAW,KAAKL,UAApB,EAAgC;AAC9B,aAAOC,mBAAP;AACD;;AAED,QACE,CAACI,WAAW,CAACE,MAAb,KACCF,WAAW,CAACG,OAAZ,IAAuB,CAACH,WAAW,CAACI,SADrC,CADF,EAGE;AACAJ,MAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAR,MAAAA,mBAAmB,CAACE,IAApB,CAAyBE,WAAzB;AAFA,YAIOK,GAJP,GAImBL,WAJnB,CAIOK,GAJP;AAAA,YAIYC,GAJZ,GAImBN,WAJnB,CAIYM,GAJZ;AAKA,UAAIC,QAAJ;;AACA,UAAID,GAAG,GAAG,CAAV,EAAa;AACXC,QAAAA,QAAQ,GAAGd,IAAI,CAACa,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAX;;AACA,YAAI,CAACE,QAAQ,CAACH,SAAd,EAAyB;AACvBG,UAAAA,QAAQ,CAACC,YAAT,GAAwBR,WAAxB;AACAH,UAAAA,cAAc,CAACC,IAAf,CAAoBS,QAApB;AACD;AACF;;AACD,UAAID,GAAG,GAAGb,IAAI,CAACM,MAAL,GAAc,CAAxB,EAA2B;AACzBQ,QAAAA,QAAQ,GAAGd,IAAI,CAACa,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAX;;AACA,YAAI,CAACE,QAAQ,CAACH,SAAd,EAAyB;AACvBG,UAAAA,QAAQ,CAACC,YAAT,GAAwBR,WAAxB;AACAH,UAAAA,cAAc,CAACC,IAAf,CAAoBS,QAApB;AACD;AACF;;AACD,UAAIF,GAAG,GAAG,CAAV,EAAa;AACXE,QAAAA,QAAQ,GAAGd,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAX;;AACA,YAAI,CAACE,QAAQ,CAACH,SAAd,EAAyB;AACvBG,UAAAA,QAAQ,CAACC,YAAT,GAAwBR,WAAxB;AACAH,UAAAA,cAAc,CAACC,IAAf,CAAoBS,QAApB;AACD;AACF;;AACD,UAAIF,GAAG,GAAGZ,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,GAAiB,CAA3B,EAA8B;AAC5BQ,QAAAA,QAAQ,GAAGd,IAAI,CAACa,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAX;;AACA,YAAI,CAACE,QAAQ,CAACH,SAAd,EAAyB;AACvBG,UAAAA,QAAQ,CAACC,YAAT,GAAwBR,WAAxB;AACAH,UAAAA,cAAc,CAACC,IAAf,CAAoBS,QAApB;AACD;AACF;AACF;AACF;AACF","sourcesContent":["// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nextNodesStack = [];\r\n  nextNodesStack.push(startNode);\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.pop();\r\n\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}