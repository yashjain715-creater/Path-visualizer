{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n\n  while (unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (!closestNode.isWall) {\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nfunction sortByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}","map":{"version":3,"sources":["C:\\Users\\yashj\\OneDrive\\Desktop\\pathFinderVisualizer\\src\\algorithms\\aStar.js"],"names":["AStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","nodes","row","node","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","distanceToFinishNode","previousNode","neighbors","col","filter"],"mappings":"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","sourcesContent":["// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function AStar(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}